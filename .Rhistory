t.test(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
t.test(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100), c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
t.test(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
shiny::runApp()
ыгььукн(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
summery(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
summeri(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
summary(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
?summary
runApp()
runApp()
runApp()
?verbatimTextOutput
runApp()
04_1.txt
?fileInput
?verbatimTextOutput
?renderText
runApp()
runApp()
?paste
?columnnames
?colnames
runApp()
runApp()
runApp()
runApp()
paste("\ns\nf\ne")
paste("
s
f
e")
"
s
f
e"
"            "
"            \r\n"
"            \n\r"
"           \\n\\r"
"           \\n/r"
"           /n/r"
print("\n")
print("")
print("
")
print("\\n")
runApp()
runApp()
runApp()
runApp()
?cat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
?label
runApp('C:/Program Files/R/R-3.3.1/library/shiny/examples/03_reactivity')
runApp()
runApp()
runApp()
t.test(c(1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100))
runApp()
runApp()
?glm
t.test(100, conf.level = 0.9)
?t.test
c(1)
t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int
c(1, 2, 3, 3, 3, 4, 3, 3, 3)
t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int[0]
t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int[1]
t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int[2]
t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int[3]
mean_conf_int <- t.test(c(1, 2, 3, 3, 3, 4, 3, 3, 3),conf.level = 0.9)$conf.int;
mean_conf_int
mean_conf_int[1]
mean_conf_int[2]
object(mean_conf_int)
summary(mean_conf_int)
type(mean_conf_int)
typeof(mean_conf_int)
mode(mean_conf_int)
typeof(mean_conf_int)
class(mean_conf_int)
attributes(mean_conf_int)
attributes(mean_conf_int)$conf.level <- 0.8
attributes(mean_conf_int)
runApp()
runApp()
runApp()
runApp()
runApp()
?sd
runApp()
runApp()
runApp()
runApp()
runApp()
?qt\
?qt
vec <- c(1, 2, 3, 4, 5, 6);
sample(vec, length(vec))
sample(vec, length(vec), replace = T)
sample(vec, length(vec), replace = F)
install.packages("moments")
?vec
?kurtosis
??kurtosis
runApp()
runApp()
runApp()
runApp()
runApp()
"1" + "2"
cat("1", "2")
cat("1", "2", "3")
cat("1", c("2", "3"))
cat("1", c("2", "3", 4))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(c("1"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
log(2)
log(2.47)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cor.test(my_table[[1]], my_table[[2]])
my_table <- read.table("04_1.txt")
cor.test(my_table[[1]], my_table[[2]]);
cor_test <- cor.test(my_table[[1]], my_table[[2]])
?cor.test
cor(my_table);
cor(my_table);
cor(my_table);
?cor_test.num
unclass(cor_test)
unlist(cor_test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??.test
??correlation
cor(my_table)
cor(my_table, method="spearman")
my_table <- read.table("04_1.txt");
cor.test(my_table, method="spearman")
cor.test(my_table[[1]], my_table[[2]], method="spearman")
cor.test(my_table[[1]], my_table[[2]], method="kendal")
cor.test(my_table[[1]], my_table[[2]])
shiny::runApp()
install.packages("moments");
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?type
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?maply
?mapli
?mappli
??mapli
tapply?
;
?tapply
?lapply
?by
?aggregate
?split
split(c(1, 2, 3), c(TRUE, FALSE, TRUE))
split(c(1, 2, 3), c(1, 2, 1))
split(c(1, 2, 3), c(1, 2, 1))$'1'
split(c(1, 2, 3), c(1, 2, 1))$1
split(c(1, 2, 3), c(1, 2, 1))$'1'
correlation_ratio_test
s
?for
;
?list
;
?list
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?matrix
matrix()
m <- matrix()
m[2,] <- 2
m[2,]
m[1,1]
m[1,]
m[1,] < c(1);
m
m[1,] <- c(1);
m
runApp()
runApp()
runApp(c(1,2,3,4), ncot = 1, nrow = 4);
m<-matrix(c(1,2,3,4), ncot = 1, nrow = 4);
m<-matrix(c(1,2,3,4), ncot = 1, nrow = 4)
m<-matrix(c(1,2,3,4), ncol = 1, nrow = 4);
m
m[2,] <- c(5.5)
m
runApp()
?array
arr <- array(data = c(1, 2, 3, 4), dim = 2)
arr <- array(data = c(), dim = 2)
arr <- array(dim = 2)
arr
arr[1] < c(1)
arr[2] < c(2, 3)
arr
arr <- array(data = c(1, 2, 3, 4), dim = 3)
arr
arr <- array(data = c(1, 2, 3, 4, 5, 6, 7, 8), dim = c(2, 2, 2))
arr
sort(my_table)
length(my_table)
length(my_table[[1]])
?mean
mean(c(NULL), na.rm = TRUE)
mean(c(NULL, 1), na.rm = TRUE)
is.na(NULL)
is.na(NA)
is.null(NA)
is.na(NA)
is.na(NULL)
is.na(NaN)
n <- NA;
m <- NA;
m <- NULL;
my_table[1]
my_table[1,]
my_table[,1]
m<-matrix(c(1,2,3,4), ncol = 1, nrow = 4);
m$nrow
nrow(m)
my_table[1,1]
my_table[10,1]
my_table[1,10]
my_table[12,1]
my_table[12,2]
my_table[12,3]
m
runApp()
runApp()
print(c(1, 2))
print(m)
sort(c(2, 1))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?tapply
runApp()
runApp()
runApp()
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), print)
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)))
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)x)
vector(list(1, 2, 3))
c(list(1, 2, 3))
as.vector(list(1, 2, 3))
as.array(list(1, 2, 3))
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)x, simplify = TRUE)
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)x, simplify = FALSE)
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)x, simplify = "FALSE")
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)x, simplify = "vector")
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), function(x)mean(x), simplify = "vector")
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), mean, simplify = "vector")
tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), mean)
class(tapply(1:10, c(rep(1, length = 4), rep(2, length = 6)), mean))
?split
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
matrix(nrow = 0, ncol = 2);
1:1
extract(c(1, 1))
unique(c(1, 1, 2, 3))
runApp()
tapply(c(1, 2), c(1, 1), mean)
runApp()
runApp()
runApp()
runApp()
runApp()
(0.01385174/0.00498041)^2
sd(c(1))
my_table[[NULL]]
my_table[[1]][NULL]
runApp()
runApp()
runApp()
tapply(c(1, 2), c(1, 1), mean)
tapply(c(1, 2), c(1, 1), mean)$'1'
tapply(c(1, 2), c(1, 1), mean)$1
tapply(c(1, 2), c(1, 1), mean)$1
tapply(c(1, 2), c(1, 1), mean)['1']
tapply(c(1, 2), c(1, 1), mean)['2']
tapply(c(1, 2), c(1, 3), mean)['2']
tapply(c(1, 2), c(1, 3), mean)['3']
tapply(c(1, 2), c(1, 3), mean)[as.3]
tapply(c(1, 2), c(1, 3), mean)[as.character(3)]
tapply(c(1, 2), c(1, 3), mean)[2]
runApp()
?quantile
qf(1);
qf(0.3, 2, 2)
?qf
runApp()
?f.test
??f.test
t.test(2);
?t.test
t.test(c(1,2))
t.test(c(1,2), 4)
t.test(c(1,2), c(4, 9))
t.test(c(1,2), c(4))
t.test(c(1,2), c(4, 9 ,8))
t.test(c(1,2), c(4, 9 ,8), c(0, 0))
t.test(c(1,2), c(0, 0))
??f.test
var.test(c(2, 4), c(1, 9))
runApp()
runApp()
?t.test
runApp()
runApp()
runApp()
runApp()
?qf
shiny::runApp()
runApp()
table(x = c(1, 2), y = c(3, 4))
table(x = c(1, 2), y = c(3, 4), z = (5, 6))
table(x = c(1, 2), y = c(3, 4), z = c(5, 6))
frame(x = c(1, 2), y = c(3, 4), z = (5, 6))
frame(x = c(1, 2), y = c(3, 4), z = c(5, 6))
ls()
?qf
ratio = 0.5
ranges_length = 10
my_table_length = 15
f = (ratio/(ranges_length - 1))/((1 - ratio)/(my_table_length - ranges_length))
1 - 1/(1 + f*(ranges_length - 1))
df1 = (ranges_length - 1)
df2 = (my_table_length - ranges_length)
1 - 1/(f*(df1 / df2) + 1)
1 + 2*c(1, 2)
data.frame(x=c(2, 4), y = c(3, 6))
my_frame <- data.frame(x=c(2, 4), y = c(3, 6))
my_frame[3,]<-c(8, 9)
my_frame
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
