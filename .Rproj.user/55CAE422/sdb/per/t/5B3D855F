{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(moments)\n\nprimary_statistical_analysis <- function(vec, confidence_level = 0.95, vec_name = \"vec\") {\n  size_vec <- length(vec);\n  t_quantile <- qt((1 + confidence_level) / 2, size_vec - 1);\n  \n  mean_vec <- mean(vec);\n  sd_vec <- sd(vec);\n  #асимметрия\n  skewness_vec <- skewness(vec);\n  #эксцесс\n  kurtosis_vec <- kurtosis(vec);\n  \n  mean_deviation <- t_quantile*sd_vec/sqrt(size_vec);\n  sd_deviation <- t_quantile*sd_vec/sqrt(2*size_vec);\n  skewness_deviation <- t_quantile*sqrt(6*(size_vec - 2)/((size_vec + 1)*(size_vec + 3)));\n  kurtosis_deviation <-\n    t_quantile*sqrt(\n      24*size_vec*(size_vec - 2)*(size_vec - 3)\n      /\n      (((size_vec + 1)^2)*(size_vec + 3)*(size_vec + 5))\n    );\n  \n  cat(\n    vec_name,\":\\n\",\n    \"\\tmean(\", vec_name, \") = \", mean_vec,\"\\n\",\n    \"\\tconfidence interval = (\", mean_vec - mean_deviation, \", \", mean_vec + mean_deviation, \")\\n\",\n    \"\\n\",\n    \"\\tstandard deviation(\", vec_name, \") = \", sd_vec,\"\\n\",\n    \"\\tconfidence interval = (\", sd_vec - sd_deviation, \", \", sd_vec + sd_deviation, \")\\n\",\n    \"\\n\",\n    \"\\tskewness(\", vec_name, \") = \", skewness_vec,\"\\n\",\n    \"\\tconfidence interval = (\", skewness_vec - skewness_deviation, \", \", skewness_vec + skewness_deviation, \")\\n\",\n    \"\\n\",\n    \"\\tkurtosis(\", vec_name, \") = \", kurtosis_vec,\"\\n\",\n    \"\\tconfidence interval = (\", kurtosis_vec - kurtosis_deviation, \", \", kurtosis_vec + kurtosis_deviation, \")\\n\",\n    \"\\n\",\n    sep = \"\"\n  )\n}\n\n\nshinyServer(function(input, output) {\n  \n  # By declaring get_my_table as a reactive expression we ensure \n  # that:\n  #\n  #  1) It is only called when the inputs it depends on changes\n  #  2) The computation and result are shared by all the callers \n  #\t  (it only executes a single time)\n  #\n  get_my_table <- reactive({\n    result <- NULL;\n    if (!is.null(input$file1) && !is.null(input$file1$datapath)){\n      result <- read.table(input$file1$datapath, header=input$header, sep=input$sep);\n      if (!input$header) {\n        colnames(result) <- c('x', 'y');\n      }\n    }\n    return(result);\n  });\n   \n  #* **1.**\tПобудову кореляційного поля\n  output$correlation_field <- renderPlot({\n    my_table <- get_my_table();\n    if (!is.null(my_table)){\n      return(plot(my_table));\n      #return(hist(my_table[[2]]));\n      #return(hist(log(my_table[[1]])));\n      #return(plot(log(my_table[[1]]), my_table[[2]]));\n      #return(plot(my_table[[1]], exp(my_table[[2]])));\n    }\n    return(NULL);\n  })\n  \n  #і проведення первинного статистичного аналізу окремих ознак об’єкта (точкове та інтервальне оцінювання середнього, середньоквадратичного, коефіцієнтів асиметрії та ексцесу).\n  output$primary_statistical_analysis <- renderPrint({\n    my_table <- get_my_table();\n    if (is.null(my_table)) return(NULL);\n    cat(\n      cat(\"sample size is\", length(my_table[[1]]), \"\\n\\n\"),\n      primary_statistical_analysis(my_table[[1]], input$confidence_level, colnames(my_table)[1]),\n      cat(\"\\n\"),\n      primary_statistical_analysis(my_table[[2]], input$confidence_level, colnames(my_table)[2]),\n      sep = \"\"\n    );\n  })\n  \n  #* 2.1.\tзнаходження оцінки коефіцієнта кореляції, перевірку його значущості та призначення довірчого інтервалу (у випадку значущості);\n  output$Pearson_correlation_test <- renderPrint({\n    my_table <- get_my_table();\n    if (is.null(my_table)) return(NULL);\n    \n    cor_test <- cor.test(my_table[[1]], my_table[[2]], conf.level = input$confidence_level, method = \"pearson\");\n    cor_test$data.name <- paste(colnames(my_table)[1], \"and\", colnames(my_table)[2]);\n    return(cor_test);\n  })\n  \n  #* 2.2.\tобчислення коефіцієнта кореляційного відношення та перевірку його значущості;\n  \n  #* 2.3.\tпідрахунок рангових коефіцієнтів кореляції Спірмена та Кендалла та перевірку їх значущості.\n  output$Spearman_correlation_test <- renderPrint({\n    my_table <- get_my_table();\n    if (is.null(my_table)) return(NULL);\n    \n    cor_test <- cor.test(my_table[[1]], my_table[[2]], conf.level = input$confidence_level, method = \"spearman\");\n    cor_test$data.name <- paste(colnames(my_table)[1], \"and\", colnames(my_table)[2]);\n    return(cor_test);\n  })\n  \n  output$Kendall_correlation_test <- renderPrint({\n    my_table <- get_my_table();\n    if (is.null(my_table)) return(NULL);\n    \n    cor_test <- cor.test(my_table[[1]], my_table[[2]], conf.level = input$confidence_level, method = \"kendall\");\n    cor_test$data.name <- paste(colnames(my_table)[1], \"and\", colnames(my_table)[2]);\n    return(cor_test);\n  })\n  \n  return(NULL);\n})\n",
    "created" : 1480490118478.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2703264743",
    "id" : "5B3D855F",
    "lastKnownWriteTime" : 1480918424,
    "last_content_update" : 1480918424348,
    "path" : "D:/Книги/язык R/DataAnalysisLab1/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}